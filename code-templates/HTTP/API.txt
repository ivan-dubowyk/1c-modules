
#Область ПрограммныйИнтерфейс

// Возвращает версию интерфейса (версии нумеруются простым натуральным числом).
// 
// Возвращаемое значение:
//  Число - версия интерфейса.
//
Функция ВерсияИнтерфейса() Экспорт
	
	Возврат 1;
		
КонецФункции
	
#Область ПолучениеОтветов

Функция ОтветЗапросаПолучитьВерсиюAPI(Запрос) Экспорт
	
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	ДанныеОтвета.Данные.Вставить("version", API.ВерсияИнтерфейса());

	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаПолучитьАвторизацию(Запрос) Экспорт
			
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;             
	
КонецФункции

Функция ОтветЗапросаПолучитьТовары(Запрос) Экспорт
	
	ВерсияAPI = Запрос["ПараметрыURL"].Получить("Версия");
	
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	
	ДанныеЗапроса = HTTPОбщегоНазначения.ПолучитьДанныеИзЗапроса(Запрос);
	Данные = HTTPОбщегоНазначения.ПереименоватьСвойства(ДанныеЗапроса, ПереименованияПолейЗапроса());
	
	ДанныеБД = ПолучитьТовары(Данные);
	
	ДанныеОтвета.Данные.Вставить("products", HTTPОбщегоНазначения.ТаблицаЗначенийВМассивСтруктур(ДанныеБД, ПереименованияПолейТовары()));
	
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаПолучитьЦены(Запрос) Экспорт
	
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	
	ДанныеЗапроса = HTTPОбщегоНазначения.ПолучитьДанныеИзЗапроса(Запрос);
	Данные = HTTPОбщегоНазначения.ПереименоватьСвойства(ДанныеЗапроса, ПереименованияПолейЗапроса());
	
	Партнер = HTTPПовтИсп.ПартнерПользователя();
		
	Если ЗначениеЗаполнено(Партнер) Тогда
		ДанныеБД = ПолучитьЦены(Партнер, Данные);
		ДанныеОтвета.Данные.Вставить("products", HTTPОбщегоНазначения.ТаблицаЗначенийВМассивСтруктур(ДанныеБД, ПереименованияПолейТовары()));
	Иначе	
		ДанныеОтвета.ТекстОшибки = HTTPОбщегоНазначения.ТекстОшибкиДоступЗапрещен();
		ДанныеОтвета.КодОтвета = 403;
	КонецЕсли;
	
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаПолучитьЗаказы(Запрос) Экспорт
		
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	
	ДанныеЗапроса = HTTPОбщегоНазначения.ПолучитьДанныеИзЗапроса(Запрос);
	Данные = HTTPОбщегоНазначения.ПереименоватьСвойства(ДанныеЗапроса, ПереименованияПолейЗапроса());
		
	Партнер = HTTPПовтИсп.ПартнерПользователя();
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		ДанныеБД = ПолучитьЗаказы(Партнер, Данные);
		ДанныеОтвета.Данные.Вставить("orders", HTTPОбщегоНазначения.ТаблицаЗначенийВМассивСтруктур(ДанныеБД, ПереименованияПолейЗаказы()));
	Иначе	
		ДанныеОтвета.ТекстОшибки = HTTPОбщегоНазначения.ТекстОшибкиДоступЗапрещен();
		ДанныеОтвета.КодОтвета = 403;
	КонецЕсли;
	
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаДобавитьЗаказы(Запрос) Экспорт
	
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	
	Партнер = HTTPПовтИсп.ПартнерПользователя();
	
	ДанныеЗапроса = HTTPОбщегоНазначения.ПолучитьДанныеИзЗапроса(Запрос);
	Данные = HTTPОбщегоНазначения.ПереименоватьСвойства(ДанныеЗапроса, ПереименованияПолейЗаказы());
	Если Данные.Свойство("Товары") Тогда
		Данные.Товары = HTTPОбщегоНазначения.ПереименоватьСвойства(Данные.Товары, ПереименованияПолейТовары());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ДанныеОтвета = ДобавитьЗаказы(Партнер, Данные);
		Если ДанныеОтвета.Успешно Тогда
			ДанныеОтвета.КодОтвета = 201;
		КонецЕсли;
	Иначе	
		ДанныеОтвета.ТекстОшибки = HTTPОбщегоНазначения.ТекстОшибкиДоступЗапрещен();
		ДанныеОтвета.КодОтвета = 403;
	КонецЕсли;
	
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаПолучитьРеквизитыЗаказа(Запрос) Экспорт
	
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	ДанныеОтвета.Данные = РеквизитыЗаказа();

	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаПолучитьКорзину(Запрос) Экспорт
		
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	
	ДанныеЗапроса = HTTPОбщегоНазначения.ПолучитьДанныеИзЗапроса(Запрос);
	Данные = HTTPОбщегоНазначения.ПереименоватьСвойства(ДанныеЗапроса, ПереименованияПолейЗапроса());
		
	Партнер = HTTPПовтИсп.ПартнерПользователя();
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		ДанныеБД = ПолучитьКорзину(Партнер);
		ДанныеОтвета.Данные.Вставить("products", HTTPОбщегоНазначения.ТаблицаЗначенийВМассивСтруктур(ДанныеБД, ПереименованияПолейЗаказы()));
	Иначе	
		ДанныеОтвета.ТекстОшибки = HTTPОбщегоНазначения.ТекстОшибкиДоступЗапрещен();
		ДанныеОтвета.КодОтвета = 403;
	КонецЕсли;
	
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаДобавитьВКорзину(Запрос) Экспорт
		
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	
	ДанныеЗапроса = HTTPОбщегоНазначения.ПолучитьДанныеИзЗапроса(Запрос);
	Данные = HTTPОбщегоНазначения.ПереименоватьСвойства(ДанныеЗапроса, ПереименованияПолейЗапроса());
		
	Партнер = HTTPПовтИсп.ПартнерПользователя();
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		ДанныеОтвета = ДобавитьВКорзину(Партнер, Данные);
		Если ДанныеОтвета.Успешно Тогда
			ДанныеОтвета.КодОтвета = 201;
		КонецЕсли;
	Иначе	
		ДанныеОтвета.ТекстОшибки = HTTPОбщегоНазначения.ТекстОшибкиДоступЗапрещен();
		ДанныеОтвета.КодОтвета = 403;
	КонецЕсли;
	
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаИзменитьКорзину(Запрос) Экспорт
		
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	
	ДанныеЗапроса = HTTPОбщегоНазначения.ПолучитьДанныеИзЗапроса(Запрос);
	Данные = HTTPОбщегоНазначения.ПереименоватьСвойства(ДанныеЗапроса, ПереименованияПолейЗапроса());
		
	Партнер = HTTPПовтИсп.ПартнерПользователя();
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ДанныеБД = ИзменитьКорзину(Партнер, Данные);
		
		Если НЕ ДанныеБД.Успешно Тогда
				
			ДанныеОтвета.ТекстОшибки = ДанныеБД.ТекстОшибки;
			ДанныеОтвета.КодОтвета = 520;
		Иначе
			ДанныеОтвета.Данные.Вставить("products", HTTPОбщегоНазначения.ТаблицаЗначенийВМассивСтруктур(ДанныеБД.Данные, ПереименованияПолейЗаказы()));
		КонецЕсли;
		
	Иначе	
		ДанныеОтвета.ТекстОшибки = HTTPОбщегоНазначения.ТекстОшибкиДоступЗапрещен();
		ДанныеОтвета.КодОтвета = 403;
	КонецЕсли;
	
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаЗаменитьКорзину(Запрос) Экспорт
		
	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	
	ДанныеЗапроса = HTTPОбщегоНазначения.ПолучитьДанныеИзЗапроса(Запрос);
	Данные = HTTPОбщегоНазначения.ПереименоватьСвойства(ДанныеЗапроса, ПереименованияПолейЗапроса());
		
	Партнер = HTTPПовтИсп.ПартнерПользователя();
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ДанныеБД = ЗаменитьКорзину(Партнер, Данные);
		
		Если НЕ ДанныеБД.Успешно Тогда
				
			ДанныеОтвета.ТекстОшибки = ДанныеБД.ТекстОшибки;
			ДанныеОтвета.КодОтвета = 520;
		Иначе
			ДанныеОтвета.Данные.Вставить("products", HTTPОбщегоНазначения.ТаблицаЗначенийВМассивСтруктур(ДанныеБД.Данные, ПереименованияПолейЗаказы()));
		КонецЕсли;
		
	Иначе	
		ДанныеОтвета.ТекстОшибки = HTTPОбщегоНазначения.ТекстОшибкиДоступЗапрещен();
		ДанныеОтвета.КодОтвета = 403;
	КонецЕсли;
	
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

Функция ОтветЗапросаУдалитьКорзину(Запрос) Экспорт

	ДанныеОтвета = HTTPОбщегоНазначения.ШаблонОтвета();
	
	Партнер = HTTPПовтИсп.ПартнерПользователя();
		
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ДанныеБД = УдалитьКорзину(Партнер);

		Если НЕ ДанныеБД.Успешно Тогда
				
			ДанныеОтвета.ТекстОшибки = ДанныеБД.ТекстОшибки;
			ДанныеОтвета.КодОтвета = 520;
		КонецЕсли;
		
	Иначе	
		ДанныеОтвета.ТекстОшибки = HTTPОбщегоНазначения.ТекстОшибкиДоступЗапрещен();
		ДанныеОтвета.КодОтвета = 403;
	КонецЕсли;
	
	Ответ = HTTPОбщегоНазначения.СформироватьОтвет(Запрос, ДанныеОтвета);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Переименования полей запроса.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - Строка
//   * Значение - см. ПрограммныйИнтерфейсСервисаСлужебный.ОписаниеКолонки
Функция ПереименованияПолейЗапроса() Экспорт
	
	Служебный = HTTPОбщегоНазначения;
	Переименования = Новый Соответствие;
	
	Переименования.Вставить("article", Служебный.ОписаниеКолонки("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	Переименования.Вставить("brand", Служебный.ОписаниеКолонки("Бренд", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	Переименования.Вставить("quantity", Служебный.ОписаниеКолонки("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("price", Служебный.ОписаниеКолонки("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("period_start", Служебный.ОписаниеКолонки("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата)));
	Переименования.Вставить("id", Служебный.ОписаниеКолонки("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор")));
		
	Возврат Переименования;
	
КонецФункции

// Переименования полей запроса.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - Строка
//   * Значение - см. ПрограммныйИнтерфейсСервисаСлужебный.ОписаниеКолонки
Функция ПереименованияПолейТовары() Экспорт
	
	Служебный = HTTPОбщегоНазначения;
	Переименования = Новый Соответствие;
	
	Переименования.Вставить("article", Служебный.ОписаниеКолонки("Артикул", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	Переименования.Вставить("brand", Служебный.ОписаниеКолонки("Бренд", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	Переименования.Вставить("name", Служебный.ОписаниеКолонки("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	Переименования.Вставить("id", Служебный.ОписаниеКолонки("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор")));
	Переименования.Вставить("price",  Служебный.ОписаниеКолонки("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("quantity",  Служебный.ОписаниеКолонки("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("sum",  Служебный.ОписаниеКолонки("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("in_stock", Служебный.ОписаниеКолонки("ВНаличии", Новый ОписаниеТипов("Булево")));
	Переименования.Вставить("warehouse", Служебный.ОписаниеКолонки("Склад", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	Переименования.Вставить("delivery", Служебный.ОписаниеКолонки("СрокПоставки", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	
	Возврат Переименования;
	
КонецФункции

// Переименования полей запроса.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - Строка
//   * Значение - см. ПрограммныйИнтерфейсСервисаСлужебный.ОписаниеКолонки
Функция ПереименованияПолейЗаказы() Экспорт
	
	Служебный = HTTPОбщегоНазначения;
	Переименования = Новый Соответствие;
	
	Переименования.Вставить("number", Служебный.ОписаниеКолонки("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(11)));
	Переименования.Вставить("datetime", Служебный.ОписаниеКолонки("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)));
	Переименования.Вставить("status", Служебный.ОписаниеКолонки("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(50)));
	Переименования.Вставить("total_sum", Служебный.ОписаниеКолонки("СуммаДокумента", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2, ДопустимыйЗнак.Неотрицательный)));
	Переименования.Вставить("comment", Служебный.ОписаниеКолонки("Комментарий", ОбщегоНазначения.ОписаниеТипаСтрока(250)));
	Переименования.Вставить("products", Служебный.ОписаниеКолонки("Товары", Новый ОписаниеТипов("ТаблицаЗначений")));
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Переименования, ПереименованияПолейТовары(), Истина); 
	
	Возврат Переименования;
	
КонецФункции

Функция РеквизитыЗаказа()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("comment", "Комментарий");	
	
	Возврат Реквизиты;
		
КонецФункции

Функция РеквизитыОформленияЗаказа(Партнер, ТаблицаТоваров, ДанныеЗаполнения, ВидЦены)
	
	СтруктураРеквизитов = Новый Структура;
	
	Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЦены, "ВалютаЦены");
	Организация = УправлениеСвойствами.ЗначениеСвойства(Партнер, ДР_ПредопределенныеЗначенияВызовСервера.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.Партнеры_ОсновнаяФирма));
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = ДР_ПредопределенныеЗначенияВызовСервера.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.Организации_Автодеталь);	
	КонецЕсли;
	
	Комментарий = ?(ДанныеЗаполнения.Свойство("Комментарий"), ДанныеЗаполнения.Комментарий, "");
	Комментарий = Комментарий + Символы.ПС + "Сформирован автоматически на платформе QWEP";
	
	СтруктураРеквизитов.Вставить("Дата", ТекущаяДатаСеанса());
	СтруктураРеквизитов.Вставить("Партнер",	Партнер);
	СтруктураРеквизитов.Вставить("Комментарий", Комментарий);
	СтруктураРеквизитов.Вставить("Товары", ТаблицаТоваров);
	СтруктураРеквизитов.Вставить("Валюта", Валюта);
	СтруктураРеквизитов.Вставить("Организация",	Организация);
		
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция ОчиститьЗаказанныеПозицииВКорзине(Заказ, ОбъектАвторизации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаТовары.НоменклатураНабора,
	|	ЗаказКлиентаТовары.ХарактеристикаНабора,
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	ЗаказКлиентаТовары.Упаковка,
	|	ЗаказКлиентаТовары.КоличествоУпаковок
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорзинаПокупателя.ОбъектАвторизации,
	|	КорзинаПокупателя.НоменклатураНабора,
	|	КорзинаПокупателя.ХарактеристикаНабора,
	|	КорзинаПокупателя.Номенклатура,
	|	КорзинаПокупателя.Характеристика,
	|	КорзинаПокупателя.Упаковка,
	|	КорзинаПокупателя.КоличествоУпаковок,
	|	КорзинаПокупателя.Цена,
	|	КорзинаПокупателя.ДатаПомещения,
	|	КорзинаПокупателя.Валюта
	|ИЗ
	|	РегистрСведений.КорзинаПокупателя КАК КорзинаПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО КорзинаПокупателя.Номенклатура = ДанныеДокумента.Номенклатура
	|			И КорзинаПокупателя.Характеристика = ДанныеДокумента.Характеристика
	|			И КорзинаПокупателя.Упаковка = ДанныеДокумента.Упаковка
	|ГДЕ
	|	КорзинаПокупателя.ОбъектАвторизации = &ОбъектАвторизации
	|	И ДанныеДокумента.КоличествоУпаковок ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ОбъектАвторизации", ОбъектАвторизации);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	НаборЗаписей = РегистрыСведений.КорзинаПокупателя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектАвторизации.Установить(ОбъектАвторизации, Истина);
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();
	
КонецФункции

#Область Данные

// Возвращает Таблицу товаров
//
// Параметры:
//  Артикул	 - Строка - отбор по артикулу
// 
// Возвращаемое значение:
// ТаблицаЗначений - выбранные товары 
//		* Артикул
// 		* Бренд
// 		* Наименование
// 		* Идентификатор
//
Функция ПолучитьТовары(Данные)

	УстановитьПривилегированныйРежим(Истина);
	
	Артикул = Неопределено;
	Данные.Свойство("Артикул", Артикул);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("ОтборПоАртикулу", ЗначениеЗаполнено(Артикул));
	Запрос.УстановитьПараметр("СвойствоСжатыйНомер", ДР_ПредопределенныеЗначенияВызовСервера.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.НоменклатураДопРеквизит_СжатыйНомер));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	ЕстьNull(ДопРеквзитСжатыйНомер.Значение, СпрНоменклатура.Артикул) КАК СжатыйАртикул,
	|	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.Производитель) КАК Бренд,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СпрНоменклатура.Ссылка) КАК Идентификатор
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДопРеквзитСжатыйНомер
	|	ПО СпрНоменклатура.Ссылка = ДопРеквзитСжатыйНомер.Ссылка
	|	И ДопРеквзитСжатыйНомер.Свойство = &СвойствоСжатыйНомер
	|ГДЕ
	|	НЕ СпрНоменклатура.ЭтоГруппа
	|	И (СпрНоменклатура.НаСайт
	|			ИЛИ СпрНоменклатура.Родитель.НаСайт
	|			ИЛИ СпрНоменклатура.Родитель.Родитель.НаСайт
	|			ИЛИ СпрНоменклатура.Родитель.Родитель.Родитель.НаСайт)
	|	И СпрНоменклатура.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|	И СпрНоменклатура.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ЦеныНоменклатуры25.Номенклатура
	|			ИЗ
	|				РегистрСведений.ЦеныНоменклатуры25 КАК ЦеныНоменклатуры25)
	|	И (НЕ &ОтборПоАртикулу
	|			ИЛИ ЕстьNull(ДопРеквзитСжатыйНомер.Значение, СпрНоменклатура.Артикул) = &Артикул
	|			ИЛИ СпрНоменклатура.Артикул = &Артикул)";
	
	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;	
	
КонецФункции
	
// Возвращает Таблицу товаров с ценами и остатками
//
// Параметры:
//  Артикул	 - Строка - отбор по артикулу
//  Бренд	 - Строка - отбор по бренду
// 
// Возвращаемое значение:
// ТаблицаЗначений - выбранные товары 
//		* Артикул - Строка
// 		* Бренд - Строка
// 		* Наименование - Строка
// 		* Идентификатор - Строка
// 		* Остаток - Число
// 		* Цена - Число
// 		* ВНаличии - Булево
//
Функция ПолучитьЦены(Партнер, Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	
#Область Параметры	

	Артикул = Неопределено;
	Бренд = Неопределено;
	Данные.Свойство("Артикул", Артикул);
	Данные.Свойство("Бренд", Бренд);

	ВидЦены = HTTPПовтИсп.ВидЦеныПартнера(Партнер);
													
	ВидЦенМин = ДР_ПредопределенныеЗначенияСерверПовтИсп.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.ВидЦены_ЦенаМин);
	ВидЦенЗавода = ДР_ПредопределенныеЗначенияСерверПовтИсп.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.ВидЦены_ЦенаЗавода);
	ВидЦенA = ДР_ПредопределенныеЗначенияСерверПовтИсп.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.ВидЦены_ЦенаА);
	ВидЦенD = ДР_ПредопределенныеЗначенияСерверПовтИсп.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.ВидЦены_ЦенаD);
	ВидЦенСебестоимость = ДР_ПредопределенныеЗначенияСерверПовтИсп.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.ВидЦены_Себестоимость);
	ВидЦенСебестоимостьСНДС = ДР_ПредопределенныеЗначенияСерверПовтИсп.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.ВидЦены_СебестоимостьСНДС);
	ВидЦенСебестоимостьСНДСРасчетная = ДР_ПредопределенныеЗначенияСерверПовтИсп.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.ВидЦены_СебестоимостьСНДСРасчетная);
	СкладМосква = ДР_ПредопределенныеЗначенияВызовСервера.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.Склады_ОсновнойСклад);
	СкладРостов = ДР_ПредопределенныеЗначенияВызовСервера.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.Склады_ОсновнойСкладРостов);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СкладМосква", СкладМосква);
	Запрос.УстановитьПараметр("СкладРостов", СкладРостов);
	Запрос.УстановитьПараметр("Склады", ОбщегоНазначенияКлиентСервер.МассивЗначений(СкладМосква, СкладРостов));
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	Запрос.УстановитьПараметр("ОтборПоПроизводителю", ЗначениеЗаполнено(Бренд));
	Запрос.УстановитьПараметр("Производитель", Бренд);
	Запрос.УстановитьПараметр("ОтборПоАртикулу", ЗначениеЗаполнено(Артикул));
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("ВидЦеныA",        ВидЦенA); 
	Запрос.УстановитьПараметр("ВидЦеныD",        ВидЦенD); 
	Запрос.УстановитьПараметр("ВидЦеныЗавода",   ВидЦенЗавода);
	Запрос.УстановитьПараметр("ВидЦеныМин",      ВидЦенМин);
	Запрос.УстановитьПараметр("ВидЦенСебестоимостьСНДС",  ВидЦенСебестоимостьСНДС);
	Запрос.УстановитьПараметр("ВидЦенСебестоимостьСНДСРасчетная",  ВидЦенСебестоимостьСНДСРасчетная);
	Запрос.УстановитьПараметр("ВидЦенСебестоимость",  ВидЦенСебестоимость);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ВидЦены.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("СвойствоДефицит", ДР_ПредопределенныеЗначенияСерверПовтИсп.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.НоменклатураДопРеквизит_Дефицит));
	Запрос.УстановитьПараметр("СвойствоСжатыйНомер", ДР_ПредопределенныеЗначенияВызовСервера.Получить(Перечисления.ДР_ТипыПредопределенныхЗначений.НоменклатураДопРеквизит_СжатыйНомер));
	
#КонецОбласти

#Область Запрос	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДопРеквзитСжатыйНомер
	|		ПО (СпрНоменклатура.Ссылка = ДопРеквзитСжатыйНомер.Ссылка)
	|			И (ДопРеквзитСжатыйНомер.Свойство = &СвойствоСжатыйНомер)
	|ГДЕ
	|	(НЕ &ОтборПоАртикулу
	|			ИЛИ ЕСТЬNULL(ДопРеквзитСжатыйНомер.Значение, СпрНоменклатура.Артикул) = &Артикул
	|			ИЛИ СпрНоменклатура.Артикул = &Артикул)
	|	И (НЕ &ОтборПоПроизводителю
	|			ИЛИ СпрНоменклатура.Производитель.Наименование = &Производитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	|	РаспределениеЗапасов.Склад КАК Склад,
	|	СУММА(РаспределениеЗапасов.Свободно) КАК Остаток
	|ПОМЕСТИТЬ ВТ_ОстаткиНоменклатуры
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (втНоменклатура.Ссылка = РаспределениеЗапасов.Номенклатура)
	|ГДЕ
	|	РаспределениеЗапасов.Склад В (&Склады)
	|	И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗапасов.Номенклатура,
	|	РаспределениеЗапасов.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(ИнформацияОДоступности.ЗаказПоставщику.ЖелаемаяДатаПоступления) КАК ЖелаемаяДатаПоступления
	|ПОМЕСТИТЬ втТоварыВПути
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					втНоменклатура.Ссылка
	|				ИЗ
	|					втНоменклатура)) КАК ИнформацияОДоступности
	|ГДЕ
	|	ИнформацияОДоступности.КОформлениюОстаток <> 0
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказПоставщику КАК Документ.ЗаказПоставщику).Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2) И &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияОДоступности.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(ИнформацияОДоступности.ЗаказПоставщику.ЖелаемаяДатаПоступления) КАК ЖелаемаяДатаПоступления,
	|	СУММА(ИнформацияОДоступности.КОформлениюОстаток) КАК Поступит
	|ПОМЕСТИТЬ втТоварыВПутиНаВывод
	|ИЗ
	|	втТоварыВПути КАК втТоварыВПути
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				Номенклатура В
	|					(ВЫБРАТЬ
	|						втНоменклатура.Ссылка
	|					ИЗ
	|						втНоменклатура)) КАК ИнформацияОДоступности
	|		ПО (ИнформацияОДоступности.Номенклатура = втТоварыВПути.Номенклатура)
	|			И (ИнформацияОДоступности.ЗаказПоставщику.ЖелаемаяДатаПоступления = втТоварыВПути.ЖелаемаяДатаПоступления)
	|ГДЕ
	|	ИнформацияОДоступности.КОформлениюОстаток <> 0
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказПоставщику КАК Документ.ЗаказПоставщику).Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2) И &ТекущаяДата
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияОДоступности.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АН_АналогиНоменклатуры.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втИдентификаторыАналогов
	|ИЗ
	|	РегистрСведений.АН_АналогиНоменклатуры КАК АН_АналогиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (втНоменклатура.Ссылка = АН_АналогиНоменклатуры.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АН_АналогиНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втАналоги
	|ИЗ
	|	втИдентификаторыАналогов КАК втИдентификаторыАналогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АН_АналогиНоменклатуры КАК АН_АналогиНоменклатуры
	|		ПО втИдентификаторыАналогов.Идентификатор = АН_АналогиНоменклатуры.Идентификатор
	|ГДЕ
	|	НЕ АН_АналогиНоменклатуры.Номенклатура В
	|				(ВЫБРАТЬ
	|					втНоменклатура.Ссылка
	|				ИЗ
	|					втНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втНоменклатураСАналогами
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втАналоги.Номенклатура
	|ИЗ
	|	втАналоги КАК втАналоги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СпрНоменклатура.Ссылка) КАК Идентификатор,
	|	СпрНоменклатура.Ссылка.Наименование КАК Наименование,
	|	СпрНоменклатура.Ссылка.Артикул КАК Артикул,
	|	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.Ссылка.Производитель) КАК Бренд,
	|	СпрНоменклатура.Ссылка.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ЕСТЬNULL(ВТ_ОстаткиНоменклатуры.Остаток, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ОстаткиНоменклатуры.Остаток, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВНаличии,
	|	ВЫРАЗИТЬ(NULL КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ЕСТЬNULL(втТоварыВПутиНаВывод.ЖелаемаяДатаПоступления, &ПустаяДата) КАК ЖелаемаяДатаПоступления,
	|	ВЫБОР КОГДА ЕСТЬNULL(ВТ_ОстаткиНоменклатуры.Остаток, 0) > 0 
	|		ТОГДА 1 
	|		ИНАЧЕ ВЫБОР
	|			КОГДА ЕСТЬNULL(втТоварыВПутиНаВывод.ЖелаемаяДатаПоступления, &ТекущаяДата) <= &ТекущаяДата
	|			ТОГДА 0
	|			ИНАЧЕ РАЗНОСТЬДАТ(&ТекущаяДата, ЕСТЬNULL(втТоварыВПутиНаВывод.ЖелаемаяДатаПоступления, &ТекущаяДата), ДЕНЬ)
	|			КОНЕЦ
	|	КОНЕЦ КАК СрокПоставки,
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныСебестоимостьСНДС.Цена, 0) КАК СебестоимостьСНДС,
	|	ЕСТЬNULL(ЦеныСебестоимостьСНДСРасчетная.Цена, 0) КАК СебестоимостьСНДСРасчетная,
	|	ЕСТЬNULL(ЦеныСебестоимость.Цена, 0) КАК Себестоимость,
	|	ЕСТЬNULL(ЦеныЗавода.Цена, 0) КАК ЦенаЗавода,
	|	ЕСТЬNULL(ЦеныМин.Цена, 0) КАК МинЦена,
	|	ЕСТЬNULL(ЦеныA.Цена, 0) КАК ЦенаA,
	|	ВЫРАЗИТЬ(NULL КАК ЧИСЛО(15, 2)) КАК ЦенаB,
	|	ВЫРАЗИТЬ(NULL КАК ЧИСЛО(15, 2)) КАК ЦенаC,
	|	ВЫРАЗИТЬ(NULL КАК ЧИСЛО(15, 2)) КАК ЦенаD,
	|	ЕСТЬNULL(ДопСвойствоДефицит.Значение, ЛОЖЬ) КАК Дефицит,
	|	&ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ВТ_ОстаткиНоменклатуры.Склад, Значение(Справочник.Склады.ПустаяСсылка)) = &СкладРостов
	|		ТОГДА ""Ростов""
	|		ИНАЧЕ ""Москва""
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	втНоменклатураСАналогами КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНоменклатуры КАК ВТ_ОстаткиНоменклатуры
	|		ПО СпрНоменклатура.Ссылка = ВТ_ОстаткиНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТоварыВПутиНаВывод КАК втТоварыВПутиНаВывод
	|		ПО (втТоварыВПутиНаВывод.Номенклатура = СпрНоменклатура.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(, ВидЦены = &ВидЦеныМин) КАК ЦеныМин
	|		ПО СпрНоменклатура.Ссылка = ЦеныМин.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(, ВидЦены = &ВидЦеныЗавода) КАК ЦеныЗавода
	|		ПО СпрНоменклатура.Ссылка = ЦеныЗавода.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(, ВидЦены = &ВидЦеныA) КАК ЦеныA
	|		ПО СпрНоменклатура.Ссылка = ЦеныA.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(, ВидЦены = &ВидЦенСебестоимость) КАК ЦеныСебестоимость
	|		ПО СпрНоменклатура.Ссылка = ЦеныСебестоимость.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(, ВидЦены = &ВидЦенСебестоимостьСНДС) КАК ЦеныСебестоимостьСНДС
	|		ПО СпрНоменклатура.Ссылка = ЦеныСебестоимостьСНДС.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(, ВидЦены = &ВидЦенСебестоимостьСНДСРасчетная) КАК ЦеныСебестоимостьСНДСРасчетная
	|		ПО СпрНоменклатура.Ссылка = ЦеныСебестоимостьСНДСРасчетная.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДопСвойствоДефицит
	|		ПО СпрНоменклатура.Ссылка = ДопСвойствоДефицит.Ссылка
	|			И (ДопСвойствоДефицит.Свойство = &СвойствоДефицит)
	|ГДЕ
	|	НЕ СпрНоменклатура.Ссылка.ЭтоГруппа
	//|	И (СпрНоменклатура.Ссылка.НаСайт
	//|			ИЛИ СпрНоменклатура.Ссылка.Родитель.НаСайт
	//|			ИЛИ СпрНоменклатура.Ссылка.Родитель.Родитель.НаСайт
	//|			ИЛИ СпрНоменклатура.Ссылка.Родитель.Родитель.Родитель.НаСайт)
	|	И СпрНоменклатура.Ссылка.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|	И СпрНоменклатура.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ЦеныНоменклатуры25.Номенклатура
	|			ИЗ
	|				РегистрСведений.ЦеныНоменклатуры25 КАК ЦеныНоменклатуры25)";

	
#КонецОбласти
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	// Рассчет цены клиента
	Для Каждого СтрТаблица Из ТаблицаРезультат Цикл
		ДР_УстановкаЦенСервер.РассчитатьЦенуПоПолитикеПродаж(ВидЦены, СтрТаблица);
	КонецЦикла;
		
	ТаблицаРезультат.Свернуть("Идентификатор, Наименование, Артикул, Бренд, Количество, Цена, ВНаличии, СрокПоставки, Склад");
	
	Возврат ТаблицаРезультат;

КонецФункции

Функция ПолучитьЗаказы(Партнер, Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	
#Область Параметры

	НачалоПериода = Неопределено;
	Количество = Неопределено;
	Данные.Свойство("НачалоПериода", НачалоПериода);
	Данные.Свойство("Количество", Количество);

#КонецОбласти
	
#Область Запрос

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОтборПоДате", ЗначениеЗаполнено(НачалоПериода));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Статус) КАК Статус,
	|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказКлиента.Комментарий КАК Комментарий,
	|	ЗаказКлиента.Товары.(
	|		УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Номенклатура.Ссылка) КАК Идентификатор,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.Наименование КАК Наименование,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Товары.Номенклатура.Производитель) КАК Бренд,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Товары.Склад) КАК Склад
	|	) КАК Товары
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	(НЕ &ОтборПоДате
	|			ИЛИ ЗаказКлиента.Дата >= &НачалоПериода)
	|	И ЗаказКлиента.Партнер = &Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
	
	Если НЕ Количество = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ " + Количество);
	КонецЕсли;

#КонецОбласти
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;

КонецФункции

Функция ДобавитьЗаказы(Партнер, Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = HTTPОбщегоНазначения.ШаблонОтвета();
	
	#Область Параметры
	
	ВидЦены = HTTPПовтИсп.ВидЦеныПартнера(Партнер);
	Идентификаторы = Новый Массив;
	Если Данные.Свойство("Товары")
		И ТипЗнч(Данные.Товары) = Тип("Массив") Тогда
		Для каждого Товар Из Данные.Товары Цикл
			Если Товар.Свойство("Идентификатор") Тогда
				Идентификаторы.Добавить(Товар.Идентификатор);	
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ОтборПоИдентификаторам", ЗначениеЗаполнено(Идентификаторы));
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	#КонецОбласти

	#Область Запрос

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорзинаПокупателя.Номенклатура КАК Номенклатура,
	|	КорзинаПокупателя.Упаковка КАК Упаковка,
	|	КорзинаПокупателя.КоличествоУпаковок КАК КоличествоУпаковок,
	|	КорзинаПокупателя.КоличествоУпаковок КАК Количество,
	|	КорзинаПокупателя.Цена КАК Цена,
	|	КорзинаПокупателя.КоличествоУпаковок * КорзинаПокупателя.Цена КАК Сумма,
	|	&ВидЦены КАК ВидЦены
	|ИЗ
	|	РегистрСведений.КорзинаПокупателя КАК КорзинаПокупателя
	|ГДЕ
	|	КорзинаПокупателя.ОбъектАвторизации = &Партнер
	|	И НЕ &ОтборПоИдентификаторам 
	|		ИЛИ УНИКАЛЬНЫЙИДЕНТИФИКАТОР(КорзинаПокупателя.Номенклатура.Ссылка) В (&Идентификаторы)";

	#КонецОбласти
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат.ТекстОшибки = "Корзина пуста";
		Результат.Успешно = Ложь;
	
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаРезультат = РезультатЗапроса.Выгрузить();
	
	ДанныеЗаполнения = РеквизитыОформленияЗаказа(Партнер, ТаблицаРезультат, Данные, ВидЦены);
	
	ДокОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокОбъект, ДанныеЗаполнения);
	ДокОбъект.Заполнить(ДанныеЗаполнения);
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
		ОчиститьЗаказанныеПозицииВКорзине(ДокОбъект.Ссылка, Партнер);
		
	Исключение
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		HTTPОбщегоНазначения.ЗаписатьОшибкуВЖурнал(, ТекстОшибки);
		
		Результат.ТекстОшибки = "Ошибка создания заказа. Подробности: "  + ТекстОшибки;
		Результат.Успешно = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Таблицу товаров
//
// Параметры:
//  Партнер	 - СправочникСсылка.Партнеры - отбор по партнеру
// 
// Возвращаемое значение:
// ТаблицаЗначений - выбранные товары 
//		* Артикул
// 		* Бренд
// 		* Наименование
// 		* Идентификатор
//
Функция ПолучитьКорзину(Партнер)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(КорзинаПокупателя.Номенклатура.Ссылка) КАК Идентификатор,
	|	КорзинаПокупателя.Номенклатура.Артикул КАК Артикул,
	|	КорзинаПокупателя.Номенклатура.Наименование КАК Наименование,
	|	ПРЕДСТАВЛЕНИЕ(КорзинаПокупателя.Номенклатура.Производитель) КАК Бренд,
	|	КорзинаПокупателя.КоличествоУпаковок КАК Количество,
	|	КорзинаПокупателя.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.КорзинаПокупателя КАК КорзинаПокупателя
	|ГДЕ
	|	КорзинаПокупателя.ОбъектАвторизации = &Партнер";
	
	Результат = Запрос.Выполнить().Выгрузить();

	Возврат Результат;	
	
КонецФункции

Функция ДобавитьВКорзину(Партнер, Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = HTTPОбщегоНазначения.ШаблонОтвета();
	
	Идентификатор = ?(Данные.Свойство("Идентификатор"), Новый УникальныйИдентификатор(Данные.Идентификатор), Новый УникальныйИдентификатор);
	Количество = ?(Данные.Свойство("Количество"), Данные.Количество, 0);
	Цена = ?(Данные.Свойство("Цена"), Данные.Цена, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура,
		|	СпрНоменклатура.ЕдиницаИзмерения КАК Упаковка,
		|	&Количество КАК КоличествоУпаковок,
		|	&Цена КАК Цена,
		|	&Партнер КАК ОбъектАвторизации,
		|	&ТекДата КАК ДатаПомещения,
		|	&Валюта КАК Валюта
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	УНИКАЛЬНЫЙИДЕНТИФИКАТОР(СпрНоменклатура.Ссылка) = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Цена", Цена);
	Запрос.УстановитьПараметр("Количество", Количество);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Валюта", ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();

	МенеджерЗаписи = РегистрыСведений.КорзинаПокупателя.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
	
	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		HTTPОбщегоНазначения.ЗаписатьОшибкуВЖурнал(, ТекстОшибки);
		
		Результат.ТекстОшибки = "Ошибка добавления в корзину. Подробности: "  + ТекстОшибки;
		Результат.Успешно = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
		
КонецФункции

Функция ИзменитьКорзину(Партнер, Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = HTTPОбщегоНазначения.ШаблонОтвета();
	
	Номенклатура = ?(Данные.Свойство("Идентификатор"), 
					Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Идентификатор)), 
					Справочники.Номенклатура.ПустаяСсылка()); 
	
	НаборЗаписей = РегистрыСведений.КорзинаПокупателя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектАвторизации.Установить(Партнер);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	
	Попытка
		НаборЗаписей.Записать();
		Результат.Данные = ПолучитьКорзину(Партнер);
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		HTTPОбщегоНазначения.ЗаписатьОшибкуВЖурнал(, ТекстОшибки);
		
		Результат.ТекстОшибки = "Ошибка очистки корзины. Описание ошибки: "+ ТекстОшибки;
		Результат.Успешно = Ложь;
	КонецПопытки;
		
	Возврат Результат;
		
КонецФункции

Функция ЗаменитьКорзину(Партнер, Данные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = HTTPОбщегоНазначения.ШаблонОтвета();
	
	Количество = ?(Данные.Свойство("Количество"), Данные.Количество, 0);
	Номенклатура = ?(Данные.Свойство("Идентификатор"), 
					Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Идентификатор)), 
					Справочники.Номенклатура.ПустаяСсылка()); 
	
	НаборЗаписей = РегистрыСведений.КорзинаПокупателя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектАвторизации.Установить(Партнер);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	
	НаборЗаписей.Прочитать();
	
	Для каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора.КоличествоУпаковок = Количество;	
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
		Результат.Данные = ПолучитьКорзину(Партнер);
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		HTTPОбщегоНазначения.ЗаписатьОшибкуВЖурнал(, ТекстОшибки);
		
		Результат.ТекстОшибки = "Ошибка изменения корзины. Описание ошибки: "+ ТекстОшибки;
		Результат.Успешно = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

Функция УдалитьКорзину(Партнер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = HTTPОбщегоНазначения.ШаблонОтвета();

	НаборЗаписей = РегистрыСведений.КорзинаПокупателя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектАвторизации.Установить(Партнер);
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		HTTPОбщегоНазначения.ЗаписатьОшибкуВЖурнал(, ТекстОшибки);
		
		Результат.ТекстОшибки = "Ошибка очистки корзины. Описание ошибки: "+ ТекстОшибки;
		Результат.Успешно = Ложь;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

#КонецОбласти


#КонецОбласти
